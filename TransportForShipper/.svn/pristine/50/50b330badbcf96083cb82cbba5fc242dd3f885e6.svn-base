package com.topjet.shipper.activity;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;

import org.json.JSONArray;
import org.json.JSONObject;

import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.Message;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ListView;

import com.topjet.shipper.widget.RefreshableView;
import com.topjet.shipper.widget.RefreshableView.PullToRefreshListener;
import com.topjet.shipper.R;
import com.topjet.shipper.adapter.GoodsHistoryAdapter;
import com.topjet.shipper.util.DefaultConst;


/**  
 * <pre>
 * Copyright:	Copyright (c)2014 
 * Company:		杭州龙驹信息科技有限公司
 * Author:		wanghm
 * Create at:	2014-5-26 下午2:25:00  
 * Description:历史货源
 *
 * 修改历史:
 * 日期    作者    版本  修改描述
 * ------------------------------------------------------------------  
 * 
 * </pre>
 */  
public class GoodsHistoryActivity extends BaseListViewActivity implements OnClickListener,OnScrollListener{
	
	private ListView goodsListView;
	
	private ImageView noImageView;
	
	private Button tradeButton;
	
	private Button notradeButton;
	
	private GoodsHistoryAdapter goodsAdapter;
	
	private RefreshableView refreshableView;
	
	private boolean append = false;
	
	private Map<String, Object> params;
	
	//0未成交，1成交
	private String GSSTS = "1";
	
	private LinkedList<JSONObject> newdata;
	
	private JSONObject jObject;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		setContentView(R.layout.activity_goods_history);
		super.onCreate(savedInstanceState);	
		initView();
		initData();	 
	}
	
	public void initData() {
		initProgress("加载中……");
		goodsAdapter = new GoodsHistoryAdapter(this,GSSTS);
		goodsListView.addFooterView(footerView);
		goodsListView.setAdapter(goodsAdapter);
		goodsListView.setOnScrollListener(this);
		goodsListView.setOnItemClickListener( new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
				JSONObject g = (JSONObject) goodsAdapter.getItem(position);
//				showGoodsDetail(g.optLong("GSID"),g.optString("GSSTS"));
			}
		});
		
		//下拉更新
		// 不同界面在注册下拉刷新监听器时一定要传入不同的id。这里是3
		refreshableView.setOnRefreshListener(new PullToRefreshListener() {  
            @Override  
            public void onRefresh() { 
            	//不添加数据
            	append = false;
            	fetchData(false);
            	//休眠1秒.不然刷新太快，会出现重复数据
            	try {
            		Thread.sleep(1000);
				} catch (Exception e) {
				}
                refreshableView.finishRefreshing();  
            }  
        }, 3); 
		//刷新全部的话，设置为true即可
		append = false;
		isMore = false;
		fetchData(false);
	}

	private void initView() {
		initFootView(this);
		params = new HashMap<String, Object>();
		params.put("USRID", shareHelper.getUserId());
		noImageView = (ImageView) findViewById(R.id.goods_no);
		common_main.setVisibility(View.VISIBLE);
		common_title.setText("历史货源");
		tradeButton = (Button) findViewById(R.id.goods_history_traded);
		notradeButton = (Button) findViewById(R.id.goods_history_notraded);
		refreshableView = (RefreshableView) findViewById(R.id.refreshable_view);
		goodsListView = (ListView) findViewById(R.id.goods_listView);
	}
	@Override
	public void onClick(View v) {
		if (v.getId() == R.id.ll_more){
			//获取更多数据
			doMoreLoadData();
		}
	}
	
	@Override
	protected void showData() {
		fetchData(append);
	}

	private void fetchData(boolean append) {
		if(append){
			params.put("offset", goodsAdapter.getCount());
		}else {
			params.put("offset", 0);
		}
		params.put("GSSTS", GSSTS);
		mLoadData.getHistoryGoodsInfo(baseHandler, DefaultConst.CMD_GOODS_HISTORY, params);
	}
	private void renderData(JSONArray data){
		if(data.length() == 0){
			//不是点击更多时候，假如没数据，应该显示0条数据。
			if(!isMore){
				noImageView.setVisibility(View.VISIBLE);
				ll_more.setVisibility(View.GONE);
			}
			changeFootViewNoData();
			return;
		}
		if(append){
			goodsAdapter.appendData(data);
		}else{
			goodsAdapter.setData(data);
		}
		goodsAdapter.notifyDataSetChanged();
		onLoadMoreOver();
		//添加数据
		if (!append) append = !append;
	}
	private void showGoodsDetail(long gsId,String GSSTS) {
		
		Intent intent ;
		if(GSSTS.equals("GSSTS_SUBMIT")){
			intent = new Intent(this, GoodsSuccessActivity.class);
		}else {
			intent = new Intent(this, GoodsDetailActivtiy.class);
		}
		intent.putExtra("GsId", gsId);
		startActivity(intent);
	}
	@Override
	protected void ioHandler(Message msg) {
		if(msg.what == DefaultConst.CMD_GOODS_CANCLE){
			goodsAdapter.setNewData(newdata);
			goodsAdapter.notifyDataSetChanged();
			runOnUiThread(new Runnable() {
				
				@Override
				public void run() {
					notradeButton.setText("未交易("+(jObject.optLong("TotalInfoCount")-1)+")");
				}
			});
			showToast("删除成功！");
			return;
		}
		jObject = (JSONObject) msg.obj;
		JSONArray data = null;
		if(GSSTS.equals("1")){
			tradeButton.setText("已交易("+jObject.optLong("TotalInfoCount")+")");
		}else {
			notradeButton.setText("未交易("+jObject.optLong("TotalInfoCount")+")");
		}
		data = jObject.optJSONArray("goodsInfo");
		renderData(data);
		goodsAdapter.setLoading(false);
	}
	@SuppressLint({ "NewApi", "ResourceAsColor" })
	public void click(View v){
		switch (v.getId()) {
		case R.id.goods_history_traded:
			GSSTS = "1";
			tradeButton.setBackground(getResources().getDrawable(R.drawable.bt1));
			tradeButton.setTextColor(R.color.color_red);
			notradeButton.setBackground(getResources().getDrawable(R.drawable.bt2));
			notradeButton.setTextColor(R.color.color_black2);
			initData();
			break;
		case R.id.goods_history_notraded:
			GSSTS = "0";
			notradeButton.setBackground(getResources().getDrawable(R.drawable.bt1));
			notradeButton.setTextColor(R.color.color_red);
			tradeButton.setBackground(getResources().getDrawable(R.drawable.bt2));
			tradeButton.setTextColor(R.color.color_black2);
			initData();
			break;
		}
	}
	public void doFooterCenter(){
		startActivity(new Intent(context, GoodsPublishActivity.class));
	}


	@Override
	public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
		
	}
	@Override
	public void onScrollStateChanged(AbsListView view, int scrollState) {
		
		// TODO：已经停止滚动（
		if (scrollState == OnScrollListener.SCROLL_STATE_IDLE) {
			// 滚动到底部
			int viewCount = view.getCount() - 1;
			int viewLastPostion = view.getLastVisiblePosition();
			if (viewLastPostion == (viewCount)) {
				if (viewLastPostion != getLastVisiblePosition) {
					doMoreLoadData();
				}
			} 

		}
	}
	//删除货源
	public void deleteGoods(final LinkedList<JSONObject> data,final long gsid){
		Dialog dialog = new AlertDialog.Builder(context).setIcon(android.R.drawable.ic_dialog_alert)
				.setTitle("删除").setMessage("删除此货源，请确认。")
				.setPositiveButton("确定", new android.content.DialogInterface.OnClickListener() {
					
					@Override
					public void onClick(DialogInterface dialog, int which) {
						newdata = data;
						updateGoods(gsid,"1");
					}
				}).setNegativeButton("返回", new android.content.DialogInterface.OnClickListener() {
					
					@Override
					public void onClick(DialogInterface dialog, int which) {
						dialog.cancel();
					}
				}).create();
				
		dialog.show();	

	}
	//重发货源
	public void republishGoods(final Object object){
		Dialog dialog = new AlertDialog.Builder(context).setIcon(android.R.drawable.ic_dialog_alert)
				.setTitle("重发").setMessage("重发此货源，请确认。")
				.setPositiveButton("确定", new android.content.DialogInterface.OnClickListener() {
					
					@Override
					public void onClick(DialogInterface dialog, int which) {
						Intent intent = new Intent(GoodsHistoryActivity.this, GoodsPublishActivity.class);
						intent.putExtra("GsId", Long.parseLong(object.toString()));
						intent.putExtra("copy", true);
						startActivity(intent);
					}
				}).setNegativeButton("返回", new android.content.DialogInterface.OnClickListener() {
					
					@Override
					public void onClick(DialogInterface dialog, int which) {
						dialog.cancel();
					}
				}).create();
				
		dialog.show();	

	}
	private void updateGoods(long gsid,String status){
		Map<String,Object> params = new HashMap<String, Object>();
		params.put("USRID", shareHelper.getUserId());
		params.put("GSID", gsid);
		//status 0撤销 1删除
		params.put("Status", status);
		mLoadData.cancleGoods(baseHandler, DefaultConst.CMD_GOODS_CANCLE, params);
	}
	//诚信查询
	public void docriet(String mobile){
		Intent intent = new Intent(this, CreditResultActivity.class);
		intent.putExtra("number", mobile);
		startActivity(intent);
	}
}
